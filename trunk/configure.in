AC_INIT([moc],[DEVEL],[daper@daper.net])
AC_CONFIG_SRCDIR([main.c])
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_FILES(Makefile)

AM_INIT_AUTOMAKE

AC_PREREQ(2.59)

AC_CANONICAL_HOST
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_AWK
AC_SUBST([EXTRA_OBJS])

AC_HEADER_STDC
AC_CHECK_HEADERS([fcntl.h string.h sys/param.h unistd.h sys/un.h \
		  sys/socket.h sys/types.h signal.h sys/time.h \
		  sys/wait.h sys/ioctl.h \
		  time.h errno.h sys/stat.h assert.h],,
		 AC_MSG_ERROR([Can't find required header files.]))
AC_CHECK_HEADERS([sys/select.h])

AC_C_CONST
AC_C_INLINE
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AX_CFLAGS_GCC_OPTION(-Wall)
AX_CFLAGS_GCC_OPTION(-W)

COMPILE_OSS="no"
AC_CHECK_HEADER([sys/soundcard.h],
		[AC_DEFINE([HAVE_OSS], 1, [Define if you have OSS.])
		EXTRA_OBJS="$EXTRA_OBJS oss.o"
		COMPILE_OSS="yes"],
		[echo -e "\nWARNING!!! YOU DONT HAVE OSS, THE PROGRAM WILL BE USELESS!\n"])

AC_ARG_ENABLE(debug, AS_HELP_STRING(--disable-debug,Disable debug code))

if test "x$enable_debug" = "xno"
then
	AC_DEFINE([NDEBUG], 1, [Define if you don't want debug code])
	COMPILE_DEBUG='no'
else
	AX_CFLAGS_GCC_OPTION(-g)
	COMPILE_DEBUG='yes'
	EXTRA_OBJS="$EXTRA_OBJS null_out.o"
fi


AC_FUNC_MALLOC
AC_FUNC_STAT
AC_CHECK_FUNCS([getcwd memmove strcasecmp strdup strerror strncasecmp strrchr \
		socket gettimeofday getenv fork setsid kill bind listen \
		accept time connect unlink send recv select strftime],,
	       AC_MSG_ERROR([Required standard C functions are not present.]))

dnl FIXME: Support for this in the source code
AC_HEADER_DIRENT

ACX_PTHREAD 
AC_FUNC_MMAP

if test "$acx_pthread_ok" != "yes"
then
	AC_MSG_ERROR([[I don't know how to compile pthread code on this system]])
fi

CC="$PTHREAD_CC"
CFLAGS="$PTHREAD_CFLAGS $CFLAGS"
LIBS="$LIBS $PTHREAD_LIBS"

dnl __FUNCTION__
AC_TRY_COMPILE(,[printf(__FUNCTION__);], [AC_DEFINE([HAVE__FUNCTION__], 1,
	       [Define if we have __FUNCTION__ constant])])

dnl __attribute__
AC_TRY_COMPILE([#include <stdarg.h>],
	       [int f(const char *f, ...)
	       __attribute__((format (printf, 1, 2)))],
	       [AC_DEFINE([HAVE__ATTRIBUTE__], 1,
			  [Define if we have __attribute__ extension])])

dnl ncurses
AC_CHECK_LIB(ncurses, initscr, [
	AC_CHECK_HEADER([ncurses.h],, [
		AC_MSG_ERROR([You nedd ncurses header file.])])
	],
	[AC_MSG_ERROR([You need ncurses library.])]
)

AC_ARG_WITH(mp3, AS_HELP_STRING(--without-mp3,Compile without mp3 support (libmad)))

dnl getopt
AC_CHECK_FUNC(getopt_long,
	      [AC_CHECK_HEADERS([getopt.h],,[AC_MSG_ERROR([You need getopt.h])])],
	      [#FreeBSD has it there
	       AC_CHECK_LIB(gnugetopt,getopt_long,,
			    [AC_LIBOBJ(getopt)
			    AC_LIBOBJ(getopt1)
			    AC_CONFIG_LINKS([getopt.h:gnugetopt.h])]
			    )]
	      )
	      
dnl libmad
COMPILE_MAD="no"
if test "x$with_mp3" != "xno"
then
	AC_CHECK_LIB(mad, mad_stream_init, [
		AC_CHECK_HEADER([mad.h], AC_DEFINE([HAVE_MAD]))
	])

	if test "$ac_cv_lib_mad_mad_stream_init" = yes
	then
		dnl libid3tag (with zlib)
		LIBS="$LIBS -lmad"
		AC_CHECK_LIB(z, gzopen, [LIBS="$LIBS -lz"],
			     [AC_MSG_ERROR([You need zlib for libid3tag to play mp3, check the README file.])])
		AC_CHECK_LIB(id3tag, id3_file_open, [LIBS="$LIBS -lid3tag"],
			     [AC_MSG_ERROR([You need libid3tag to play mp3, check the README file.])])
		AC_CHECK_HEADER([id3tag.h],,
				[AC_MSG_ERROR([You need header file for libid3tag to compile with mp3 support, check the README file.])])
		AC_DEFINE([HAVE_MAD], 1, [Define if you want mp3 support])
		COMPILE_MAD="yes"
		EXTRA_OBJS="$EXTRA_OBJS mp3.o xing.o"
	fi
fi

dnl vorbis
COMPILE_VORBIS="no"
AC_ARG_WITH(ogg, AS_HELP_STRING(--without-ogg,Compile without OGG support.))

if test "x$with_ogg" != "xno"
then
 	AC_CHECK_LIB(vorbis, ov_open, [LIBS="$LIBS -lvorbis -lvorbisfile"],
 		     [AC_MSG_RESULT([no])], [-lvorbisfile])
 	if test "$ac_cv_lib_vorbis_ov_open" = yes
 	then
 		AC_CHECK_HEADER([vorbis/vorbisfile.h],,
 				[AC_MSG_ERROR([You need vorbis header files to compile with ogg support, check the README file.])])
 		AC_DEFINE([HAVE_VORBIS], 1, [Define if you want ogg support])
 		COMPILE_VORBIS="yes"
 		EXTRA_OBJS="$EXTRA_OBJS ogg.o"
	fi
fi

LIBS="$LIBS -lncurses"
		
AC_OUTPUT

echo
echo "----------------------------------------------------------------"
echo "MOC will be compiled with:"
echo "MP3:			"$COMPILE_MAD
echo "OGG:			"$COMPILE_VORBIS
echo "OSS:			"$COMPILE_OSS
echo "DEBUG:			"$COMPILE_DEBUG
echo "----------------------------------------------------------------"

echo "WARNING: since MOC version 2 the executable file name was changed to mocp!"
echo "Please remove old moc binary if you have installed an older version."
